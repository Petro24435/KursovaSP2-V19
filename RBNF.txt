topRule = "NAME", identifier, ";" , "BODY", statement,"DATA", varsBlok, ";" , codeBlok, "END";
varsBlok = "INTEGER_2", identifier, { commaAndIdentifier };
identifier = "_", low_letter, up_letter, up_letter, up_letter, up_letter, up_letter, up_letter, up_letter, up_letter, up_letter, up_letter;
commaAndIdentifier = ",", identifier;
statement = write | read | assignment | ifStatement| goto_statement | forToOrDownToDoRule | while | repeatUntil ;
read = "SCAN", identifier;
write = "PRINT", equation;
assignment = identifier, "<==", equation;
ifStatement = "IF", ( equation), statement, [ elseStatement ];
elseStatement = "ELSE", statement;
goto_statement = "GOTO", identifier;
goto_declaration = identifier,":";
forToOrDownToDoRule = "FOR", assignment, ("TO" | "DOWNTO"), equation, "DO", statement, ";";
while = "WHILE", equation, while_statement, "END", "WHILE"
whilestatement =  write | read | assignment | whileifStatement| goto_statement |goto_declaration | whileforToOrDownToDoRule | while | repeatUntil | continuewhile | exitwhile  ;
exitwhile = "EXIT", "WHILE" ; 
continuewhile = "CONTINUE", "WHILE" ;
whileifstatement = "IF", (equation), whilestatement, [ elseStatement ];
whileforToOrDownToDoRule = "FOR", assignment, ("TO" | "DOWNTO"), equation, "DO", whilestatement;
repeatUntil_statement = "REPEAT",{statement}, "UNTIL", equation;
primaryExpression = signedNumber | identifier | notRule | primaryExpression | group_expression ;
equation = primaryExpression , { operation , primaryExpression } ;
unairy_operation = notOperation , signedNumber |  equation  ;
operation = arithmetic | mult | logic | compare ;
operationAndIdentOrNumber = operation , (signedNumber | identifier | "(" , equation , ")") ;
group_expression = GROUPEXPRESSIONBEGIN , low_prioryty_expression , GROUPEXPRESSIONEND ;
GROUPEXPRESSIONBEGIN = "(" ; 
GROUPEXPRESSIONEND = ")" ;   
low_prioryty_expression = primaryExpression , { operation , primaryExpression } ; 

arithmetic =    "ADD" | "SUB";
mult =    "MUL" | "DIV" | "MOD";
logic =    "AND" | "OR";
notOperation =    "NOT";
compare =    "EQ" | "NE" | "<=" |">=";
comment = "!!"{ low_letter | up_letter | digit } ;
unsigned_value = ((non_zero_digit | digit) | "0");
signedNumber	=    [ sign ], digit, { unsigned_value }
sign =  "+" | "-"  ;
low_letter = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z";
up_letter = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z";
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
non_zero_digit = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
